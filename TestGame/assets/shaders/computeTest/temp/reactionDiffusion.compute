#version 460 core

layout (local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform image2D u_Texture;

uniform float dt;
uniform float dA;
uniform float dB;
uniform float feedRate;
uniform float killRate;
uniform int diffuseRadius;

void main()
{
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    vec2 current = imageLoad(u_Texture, coord).xy;

    // vec2 diffuseStrength = vec2(0.0); 
    // vec2 sum = vec2(0.0);
    // float weightSum = 0.0;
    // for (int i = -diffuseRadius; i <= diffuseRadius; i++) {
    //     for (int j = -diffuseRadius; j <= diffuseRadius; j++) {
    //         if (i == 0 && j == 0) {
    //             continue;
    //         }

    //         float distSqrd = i * i + j * j;
    //         if (distSqrd <= diffuseRadius * diffuseRadius) {
    //             float weight = 1.0 / sqrt(distSqrd);
    //             sum += imageLoad(u_Texture, coord + ivec2(i,j)).xy * weight;
    //             weightSum += weight;
    //         }
    //     }
    // }


	// diffuseStrength = sum / weightSum - current;

    vec2 diffuseStrength = vec2(0.0, 0.0);

    // float weights[3][3] = {{0.05, 0.2, 0.05},
    //                         {0.2, -1.0, 0.2},
    //                         {0.05, 0.2, 0.05}};

    float weights[3][3] = {{0.0, 1.0, 0.0},
                            {1.0, -4.0, 1.0},
                            {0.0, 1.0, 0.0}};

    int offsets[3] = {-1, 0, 1};

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            vec2 pixelData = imageLoad(u_Texture, coord + ivec2(offsets[i],offsets[j])).xy;
            diffuseStrength += pixelData * vec2(weights[i][j], weights[i][j]);
        }
    }

    float A = current.x;
    float B = current.y;

    float newA = A + (dA * diffuseStrength.x - A * B * B + feedRate * (1.0 - A));
    float newB = B + (dB * diffuseStrength.y + A * B * B - (feedRate + killRate) * B);

    vec4 newValue = vec4 (max(0,newA), min(1,newB), 0.0, 1.0);

    imageStore(u_Texture, coord, newValue);    
}